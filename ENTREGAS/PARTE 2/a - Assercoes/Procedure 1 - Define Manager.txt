/* PROCEDURE 
* Visto que o SGBD Postgres nao possui implementacao para assercoes optamos por criar uma procedure
* para que seja possível eleger um empregado como Manager do time, contudo, seguindo a regra de negócio 
* de que sempre a pessoa com maior nível de conhecimento fica com o cargo de Manager do time. */

CREATE PROCEDURE Team_Ver (id_team int)
LANGUAGE plpgsql
AS $$
      DECLARE c1 int;
BEGIN
      SELECT idt_employee INTO c1
      FROM employee 
      WHERE idt_team = id_team
      ORDER BY idt_level_knowledge DESC
      LIMIT 1;
      INSERT INTO Manager VALUES(c1);
END
$$;

/* CASOS DE TESTE */

/*CASO 1:
*	Primeiramente deve rodar o comando delete para que seja retirado o registro manager do time 1, para que, em seguida, possa ser chamado o comando CALL
* e assim seja incluído um manager novo seguindo a regra de negócio em questão.*/

DELETE
FROM manager
WHERE fk_employee_idt_employee = 5

CALL Team_Ver(1);
select * from manager where fk_employee_idt_employee = 5;

/*CASO 2:
*	Primeiramente deve rodar o comando delete para que seja retirado o registro manager do time 2, para que, em seguida, possa ser chamado o comando CALL
* e assim seja incluído um manager novo seguindo a regra de negócio em questão.*/

DELETE
FROM manager
WHERE fk_employee_idt_employee = 10

CALL Team_Ver(2);
select * from manager where fk_employee_idt_employee = 10;

/*CASO 3:
*	Neste caso, haverá um erro, pelo fato de tentar uma inserção em um time em que o empregado com o maior nível de conhecimento já está como manager do grupo.*/

CALL Team_Ver(3);
select * from manager where fk_employee_idt_employee = 10;