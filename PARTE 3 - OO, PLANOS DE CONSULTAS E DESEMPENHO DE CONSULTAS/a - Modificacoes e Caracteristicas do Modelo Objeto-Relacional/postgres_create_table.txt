/* POSTGRES - ALTERACAO DO MODELO: CREATE TABLE
* OS COMENTARIOS DO CODIGO E DO ARQUIVO .PDF DESTE ARTEFATO SE COMPLEMENTAM
*/

/* ARTEFATO A:	
*	2 CATEGORIA - TIPOS REFERENCIA
*		Tipo Address - Criacao do tipo "Address_Type";
*/
CREATE TYPE Address_Type AS (
	street VARCHAR,
	city VARCHAR,
	state VARCHAR,
	zipcode VARCHAR
);

/* Level_Knowledge - alteracao do campo idt_knowledge para idt_level_knowledge; */
CREATE TABLE Level_Knowledge (
	idt_level_knowledge SERIAL PRIMARY KEY,
	name_knowledge VARCHAR
);

/*	
*	Employee - remocao do campo idt_team pois nao ha relacionamento;
*			 - remocao da chave estrangeira idt_level_knowledge pois ha somente informacoes das tabelas "Especialist" e "Analyst";
*			 - adicao da chave estrangeira "idt_dependent" para entrar em conformidade com a herança criada;
*
*	ARTEFATO A: 
*	1 CATEGORIA - OBJETOS COMPLEXOS	
*		Tabela Employee: Criação do atributo multivalorado "Telephone";
*	2 CATEGORIA - TIPOS REFERENCIA
*		Tabela Employee: Adicao do atributo "Address" de tipo "Address_Type" criado;
*/
CREATE TABLE Employee (
	idt_employee SERIAL PRIMARY KEY,
	name_employee VARCHAR,
	date_admission DATE,
	salary DECIMAL,
	idt_department INTEGER,
	telephone JSONB,
	address Address_Type,
	idt_dependent INTEGER
--	idt_level_knowledge INTEGER,
--	idt_team INTEGER
);

CREATE TABLE Employee_History (
	idt_employee_history SERIAL PRIMARY KEY,
	date_update DATE,
	salary_update DECIMAL,
	level_knowledge_udpdate VARCHAR, 
	idt_employee INTEGER 
);

/* Dependent - remocao da chave estrangeira "idt_table" para entrar em conformidade com a heranca criada em "Employee" */
CREATE TABLE Dependent (
	idt_dependent SERIAL PRIMARY KEY,
	name_dependent VARCHAR
--	idt_employee INTEGER
);

/*  Director, Manager, Especialist, Analyst - retira a chave estrangeira "fk_Employee_idt_employee" pois agora tem a heranca
*	
*	ARTEFATO A:
*	3 CATEGORIA - HERANCA
*		Tabelas: Director, Manager, Especialist e Analyst - Criacao do comando que indica heranca de Employee (inherits (Employee));
*/

/* Director - remocao do campo "area" visto que este nao faz sentido pro modelo;
*			- adicao dos campos "rate_plr" e "luxury_car";
*/
CREATE TABLE Director (
	rate_plr VARCHAR,
	luxury_car VARCHAR
--	area VARCHAR,
--	fk_Employee_idt_employee SERIAL PRIMARY KEY
)inherits (Employee);

/* Manager - adicao dos campos "bonus" e "sport_car"; */
CREATE TABLE Manager (
	bonus DECIMAL,
	sport_car VARCHAR
--	fk_Employee_idt_employee SERIAL PRIMARY KEY
)inherits (Employee);

/* Especialist - remocao do campo "area_knowledge" pois tera uma chave estrangeira "idt_level_knowledge";
*			   - adicao da chave estrangeira "idt_level_knowledge";
*			   - adicao dos campos "company" e "cnpj";
*/
CREATE TABLE Especialist (
	idt_level_knowledge INTEGER,
	company VARCHAR,
	cnpj VARCHAR
--	area_knowledge VARCHAR,
--	fk_Employee_idt_employee SERIAL PRIMARY KEY
)inherits (Employee);

/* Analyst - adicao da chave estrangeira "idt_level_knowledge";
*		   - adicao dos campos "university" e "class";
*/
CREATE TABLE Analyst (
	idt_level_knowledge INTEGER,
	university VARCHAR,
	class VARCHAR
--	fk_Employee_idt_employee SERIAL PRIMARY KEY
)inherits (Employee);

CREATE TABLE Team (
	idt_team SERIAL PRIMARY KEY,
	name_team VARCHAR,
	idt_project INTEGER
);

CREATE TABLE Project(
	idt_project SERIAL PRIMARY KEY,
	name_project VARCHAR,
	date_create DATE,
	date_final DATE
);

/*	Sale_History e Sale - remocao do campo idt_project pois nao ha relacionamento;*/
CREATE TABLE Sale (
	idt_sale SERIAL PRIMARY KEY,
	date_sale DATE,
	amount_sale_project DECIMAL
--	idt_project INTEGER
);

CREATE TABLE Sale_History (
	idt_sale_history SERIAL PRIMARY KEY,
	date_update_sale DATE,
	cost_sale_update DECIMAL,
	idt_sale INTEGER
--	idt_project INTEGER
);

CREATE TABLE Financial_Control (
	idt_financial_control SERIAL PRIMARY KEY,
	total_cost_sale DECIMAL,
	idt_sale INTEGER
);

/* Department - adiciona a chave estrangeira "idt_project" para voltar ao contexto do modelo */
CREATE TABLE Department (
	idt_department SERIAL PRIMARY KEY,
	name_department VARCHAR,
	idt_project INTEGER
);

/*	Department_Management - remocao do campo idt_employee pois nao ha relacionamento; */

CREATE TABLE Department_Management (
	idt_dpt_management SERIAL PRIMARY KEY,
--	idt_employee INTEGER,
	idt_department INTEGER
);

/* Employee - remocao da chave estrangeira idt_level_knowledge pois ha somente informacoes das tabelas "Especialist" e "Analyst"; */
/*
ALTER TABLE Employee ADD CONSTRAINT FK_Employee_2
FOREIGN KEY (idt_level_knowledge)
REFERENCES Level_Knowledge (idt_level_knowledge)
ON DELETE RESTRICT;
*/

ALTER TABLE Employee ADD CONSTRAINT FK_Employee_3
FOREIGN KEY (idt_department)
REFERENCES Department (idt_department);

/* Employee - adicao da chave estrangeira "idt_dependent" para entrar em conformidade com a herança criada; */
ALTER TABLE Employee ADD CONSTRAINT FK_Employee_4
FOREIGN KEY (idt_dependent)
REFERENCES Dependent (idt_dependent);

/* Dependent - remocao da chave estrangeira "idt_table" para entrar em conformidade com a heranca criada em "Employee" */
/*
ALTER TABLE Dependent ADD CONSTRAINT FK_Dependent_2
FOREIGN KEY (idt_employee)
REFERENCES Employee (idt_employee) 
ON UPDATE CASCADE ON DELETE RESTRICT;
*/

/*  Director, Manager, Especialist, Analyst - retira a chave estrangeira "fk_Employee_idt_employee" pois agora tem a herança; */

/*
ALTER TABLE Director ADD CONSTRAINT FK_Director_2
FOREIGN KEY (fk_Employee_idt_employee)
REFERENCES Employee (idt_employee)
ON DELETE CASCADE;
*/


/*
ALTER TABLE Manager ADD CONSTRAINT FK_Manager_2
FOREIGN KEY (fk_Employee_idt_employee)
REFERENCES Employee (idt_employee)
ON DELETE CASCADE;
*/

/*
ALTER TABLE Especialist ADD CONSTRAINT FK_Especialist_2
FOREIGN KEY (fk_Employee_idt_employee)
REFERENCES Employee (idt_employee)
ON DELETE CASCADE;
*/

/*
ALTER TABLE Analyst ADD CONSTRAINT FK_Analyst_2
FOREIGN KEY (fk_Employee_idt_employee)
REFERENCES Employee (idt_employee)
ON DELETE CASCADE;
*/

/* Especialist - adicao da chave estrangeira "idt_level_knowledge"; */
ALTER TABLE Analyst ADD CONSTRAINT FK_Especialist_4
FOREIGN KEY (idt_level_knowledge)
REFERENCES Level_Knowledge (idt_level_knowledge)
ON UPDATE CASCADE ON DELETE CASCADE;


/* Analyst - adicao da chave estrangeira "idt_level_knowledge"; */
ALTER TABLE Analyst ADD CONSTRAINT FK_Analyst_4
FOREIGN KEY (idt_level_knowledge)
REFERENCES Level_Knowledge (idt_level_knowledge)
ON UPDATE CASCADE ON DELETE RESTRICT;

/*	Sale_History e Sale - remocao do campo idt_project pois nao ha relacionamento;*/
/*
ALTER TABLE Sale ADD CONSTRAINT FK_Sale_2
FOREIGN KEY (idt_project)
REFERENCES Project;
*/

ALTER TABLE Sale_History ADD CONSTRAINT FK_Sale_History_1
FOREIGN KEY (idt_sale)
REFERENCES Sale (idt_sale);

/*
ALTER TABLE Sale_History ADD CONSTRAINT FK_Sale_History_1
FOREIGN KEY (idt_project)
REFERENCES Project;
*/

ALTER TABLE Financial_Control ADD CONSTRAINT FK_Financial_Control_2
FOREIGN KEY (idt_sale)
REFERENCES Sale (idt_sale);

/* Department_Management - adicao da FK idt_department; */
ALTER TABLE Department_Management ADD CONSTRAINT FK_department_Management_2
FOREIGN KEY (idt_department)
REFERENCES Department (idt_department);

ALTER TABLE Team ADD CONSTRAINT FK_project
FOREIGN KEY (idt_project)
REFERENCES Project (idt_project);

/*
ALTER TABLE Department_Management ADD CONSTRAINT FK_Employee_2
FOREIGN KEY (idt_employee)
REFERENCES Employee (idt_employee);
*/

/* Department - adiciona a chave estrangeira "idt_project" para voltar ao contexto do modelo */
ALTER TABLE Department ADD CONSTRAINT FK_Department_1
FOREIGN KEY (idt_project)
REFERENCES Project (idt_project)
ON UPDATE CASCADE ON DELETE CASCADE;