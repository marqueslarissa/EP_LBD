
/* Toda vez que um empregado é editado, uma copia dessa edição é salva através desta trigger na tabela
de histórico de empregados */

CREATE OR REPLACE FUNCTION processa_emp_history() RETURNS TRIGGER AS $processa_emp_history$  /* criação da função processa_emp_history  */
    BEGIN /*inico do bloco que vai verificar os comandos DML para atualização da tabela employee_history, selecionando os campos novos e inserindo na tabela*/
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO employee_history(date_update, salary_update, level_knowledge_udpdate, idt_employee) SELECT now(),old.salary,old.idt_level_knowledge, OLD.idt_employee;
            RETURN OLD;
        ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO employee_history(date_update, salary_update, level_knowledge_udpdate, idt_employee) SELECT now(),new.salary,new.idt_level_knowledge, OLD.idt_employee;
            RETURN NEW;
        ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO employee_history(date_update, salary_update, level_knowledge_udpdate, idt_employee) SELECT now(),new.salary,new.idt_level_knowledge, NEW.idt_employee;
            RETURN NEW;
        END IF;
        RETURN NULL; 
    END;
$processa_emp_history$ language plpgsql;


/* CRIAÇÃO DA TRIGGER - DEPOIS QUE QUALQUER COMANDO DML (INSERT, DELETE OU UPDATE) FOR EXECUTADO NA TABEA EMPLOYEE EXECUTE A FUNÇÃO processa_emp_history*/
CREATE TRIGGER emp_history
AFTER INSERT OR UPDATE OR DELETE ON employee
    FOR EACH ROW EXECUTE PROCEDURE processa_emp_history();

/*casos de teste  */

INSERT INTO Employee VALUES(30, 'Gabriel Lourenco', '2017-01-10', '40000.00', 13, 2, 5);
DELETE FROM employee WHERE name_employee = 'Cintia Silva';
UPDATE employee SET salary = 1500 WHERE name_employee ='Conceição Silva';


/* ESTA TRIGGER É CRIADA PARA VERIFICAR A INSERÇÃO NO CAMPO SALARIO, SE INSERIRMOS OU ATUALIZARMOS ESSE CAMPO COM UM VALOR MENOR DO QUE O PISO SALARIO DA EMPRESA ELE RETORNA UMA MENSAGEM DE ERRO 
E TAMBÉM VERIFICA ANTES DE INSERIOR OU ATUALIZAR SE O NOME DO USUARIO É INVALIDO RETORNANDO TAMBÉM UM MENSAGEM DE ERRO NÃO DEIXANDO OS CAMPOS SOFREREM QUALQUER ALTERAÇÃO*/

CREATE FUNCTION emp_check_sal() RETURNS trigger AS $emp_check_sal$
    BEGIN
               IF NEW.name_employee IS  NULL THEN
            RAISE EXCEPTION 'NOME FUNCIONARIO NAO PODE SER NULO';
        END IF;
        IF NEW.salary IS NULL THEN
            RAISE EXCEPTION '% FUNCIONARIO NAO PODE TER SALARIO NULO', NEW.name_employee;
        END IF;
       
           IF NEW.salary < 1000 THEN
            RAISE EXCEPTION '% FUNCIONARIO NAO PODE TER SALARIO INFERIOR A R$ 10000', NEW.name_employee;
        END IF;
        RETURN NEW;
    END;
$emp_check_sal$ LANGUAGE plpgsql;

CREATE TRIGGER check_sal_emp 
  BEFORE INSERT OR UPDATE ON employee
    FOR EACH ROW EXECUTE procedure emp_check_sal();

/* CASOS DE TESTE */

     update employee set salary = 3500 where NAME_EMPLOYEE = 'Nelson Paulo Lorenzo Ramos';
  
    INSERT INTO Employee VALUES(32, 'RAFAEL VIERIA DE LIMA', '2019-01-10', '50000.00', 6, 2, 1);
   
    INSERT INTO Employee VALUES(33, 'MARCIO OLIVEIRA', '2020-01-10', '900.00', 1, 2, 1);
   




